CREATE OR REPLACE FUNCTION FUNCION_ESTADISTICAS(IDENT VARCHAR2)
RETURN VARCHAR2
IS
RESULTADO VARCHAR2(200);
CURSOR CU_JUGADORES IS
SELECT ID_JUGADOR, NOMBRE, APELLIDO, PARTIDAS_JUGADAS, GANES, PERDIDAS, EMPATES FROM JUGADOR;
BEGIN
FOR JUG IN CU_JUGADORES
LOOP
IF JUG.ID_JUGADOR = IDENT THEN
RESULTADO := 'EL JUGADOR '||JUG.NOMBRE||' '||JUG.APELLIDO||' HA JUGADO UN TOTAL DE: '||TO_CHAR(JUG.PARTIDAS_JUGADAS)||' . DE LAS CUALES HA GANADO '||TO_CHAR(JUG.GANES)||', HA PERDIDO '||TO_CHAR(JUG.PERDIDAS)||' Y HA EMPATADO '||TO_CHAR(JUG.EMPATES)||'.';
RETURN RESULTADO;
ELSE
RESULTADO := 'EL ID INGRESADO NO CORRESPONDE A UN JUGADOR REGISTRADO.';
END IF;
EXIT WHEN CU_JUGADORES%NOTFOUND;
END LOOP;
RETURN RESULTADO;
END;
/

CREATE OR REPLACE FUNCTION VALIDAR_PARTIDA(IDE_PARTIDA NUMBER)
RETURN BOOLEAN
IS
EXISTE BOOLEAN := FALSE;
CURSOR CU_PARTIDAS IS
SELECT ID_PARTIDA FROM PARTIDA;
BEGIN
FOR PART IN CU_PARTIDAS
LOOP
IF PART.ID_PARTIDA = IDE_PARTIDA THEN
EXISTE := TRUE;
RETURN EXISTE;
END IF;
END LOOP;
RETURN EXISTE;
END;
/

CREATE OR REPLACE FUNCTION VALIDAR_PARTIDA_PENDIENTE(IDE_PARTIDA NUMBER)
RETURN BOOLEAN
IS
EXISTE BOOLEAN := FALSE;
ESTADO VARCHAR2(20);
BEGIN
SELECT DISTINCT RESULTADO INTO ESTADO FROM PARTIDA WHERE ID_PARTIDA = IDE_PARTIDA;
IF ESTADO = 'PENDIENTE' THEN
EXISTE := TRUE;
RETURN EXISTE;
END IF;
RETURN EXISTE;
END;
/

CREATE OR REPLACE FUNCTION VALIDAR_JUGADOR(VAR_ID VARCHAR2)
RETURN BOOLEAN
IS
EXISTE BOOLEAN := FALSE;
CURSOR CU_JUGADORES IS
SELECT ID_JUGADOR FROM JUGADOR;
BEGIN
FOR JUG IN CU_JUGADORES
LOOP
IF JUG.ID_JUGADOR = VAR_ID THEN
EXISTE := TRUE;
RETURN EXISTE;
END IF;
END LOOP;
RETURN EXISTE;
END;
/

CREATE OR REPLACE FUNCTION DEVOLVER_FICHA_CAMPO(PART NUMBER, FIL NUMBER, COL VARCHAR2)
RETURN VARCHAR2
IS
LINEA_PART PARTIDA%ROWTYPE;
CAMPO VARCHAR2(10);
RESULTADO BOOLEAN;
BEGIN
SELECT * INTO LINEA_PART FROM PARTIDA WHERE ID_PARTIDA = PART AND fila = FIL;
RESULTADO := FALSE;
CASE UPPER(COL)
WHEN 'A' THEN
	CAMPO := LINEA_PART.COL_A;
WHEN 'B' THEN
	CAMPO := LINEA_PART.COL_B;
WHEN 'C' THEN
	CAMPO := LINEA_PART.COL_C;
WHEN 'D' THEN
	CAMPO := LINEA_PART.COL_D;
WHEN 'E' THEN
	CAMPO := LINEA_PART.COL_E;
WHEN 'F' THEN
	CAMPO := LINEA_PART.COL_F;
WHEN 'G' THEN
	CAMPO := LINEA_PART.COL_G;
WHEN 'H' THEN
	CAMPO := LINEA_PART.COL_H;
END case ;
RETURN CAMPO;
END;
/

CREATE OR REPLACE FUNCTION DEVOLVER_CHAR_COLUMNA (NUM_COL NUMBER) RETURN VARCHAR2 IS
    RESULTADO VARCHAR2(2);
BEGIN
    CASE NUM_COL
        WHEN 1 THEN RESULTADO := 'A';
        WHEN 2 THEN RESULTADO := 'B';
        WHEN 3 THEN RESULTADO := 'C';
        WHEN 4 THEN RESULTADO := 'D';
        WHEN 5 THEN RESULTADO := 'E';
        WHEN 6 THEN RESULTADO := 'F';
        WHEN 7 THEN RESULTADO := 'G';
        WHEN 8 THEN RESULTADO := 'H';
	END CASE;
    RETURN RESULTADO;
end;
/

CREATE OR REPLACE FUNCTION DEVOLVER_NUMERO_COLUMNA (CHAR_COL VARCHAR2) RETURN NUMBER IS
    RESULTADO NUMBER;
BEGIN
    CASE upper(CHAR_COL)
        WHEN 'A' THEN RESULTADO := 1;
        WHEN 'B' THEN RESULTADO:= 2;
        WHEN 'C' THEN RESULTADO := 3;
        WHEN 'D' THEN RESULTADO := 4;
        WHEN 'E' THEN RESULTADO := 5;
        WHEN 'F' THEN RESULTADO := 6;
        WHEN 'G' THEN RESULTADO := 7;
        WHEN 'H' THEN RESULTADO := 8;
	END CASE;
    RETURN RESULTADO;
end;
/

CREATE OR REPLACE FUNCTION DEVOLVER_COLOR_TURNO(PART NUMBER)
RETURN VARCHAR2
IS
COLOR_TURNO VARCHAR2(20);
BEGIN
SELECT DISTINCT TURNO INTO COLOR_TURNO FROM PARTIDA WHERE ID_PARTIDA = PART;
RETURN COLOR_TURNO;
END;
/

CREATE OR REPLACE FUNCTION VALOR_ULTIMA_PARTIDA
RETURN NUMBER
IS
NUM NUMBER;
BEGIN
SELECT MAX(ID_PARTIDA) INTO NUM FROM PARTIDA;
IF NUM IS NULL THEN
RETURN 0;
ELSE
RETURN NUM;
END IF;
END;
/

CREATE OR REPLACE FUNCTION INCIAR_TABLERO(JUG_B VARCHAR2, JUG_N VARCHAR2)
RETURN NUMBER
IS
NUM_PARTIDA NUMBER;
BEGIN
NUM_PARTIDA := VALOR_ULTIMA_PARTIDA;
NUM_PARTIDA := NUM_PARTIDA + 1;
    INSERT INTO PARTIDA VALUES (NUM_PARTIDA, 8, 'TN', 'CN', 'AN', 'KN', 'RN', 'AN', 'CN', 'TN','BLANCAS',JUG_B,JUG_N,'PENDIENTE');
    INSERT INTO PARTIDA VALUES (NUM_PARTIDA, 7, 'PN', 'PN', 'PN', 'PN', 'PN', 'PN', 'PN', 'PN','BLANCAS',JUG_B,JUG_N,'PENDIENTE');
    INSERT INTO PARTIDA VALUES (NUM_PARTIDA, 6, '  ',  '  ', '  ', '  ', '  ', '  ', '  ', '  ','BLANCAS',JUG_B,JUG_N,'PENDIENTE');
    INSERT INTO PARTIDA VALUES (NUM_PARTIDA, 5, '  ',  '  ', '  ', '  ', '  ', '  ', '  ', '  ','BLANCAS',JUG_B,JUG_N,'PENDIENTE');
    INSERT INTO PARTIDA VALUES (NUM_PARTIDA, 4, '  ',  '  ', '  ', '  ', '  ', '  ', '  ', '  ','BLANCAS',JUG_B,JUG_N,'PENDIENTE');
    INSERT INTO PARTIDA VALUES (NUM_PARTIDA, 3, '  ',  '  ', '  ', '  ', '  ', '  ', '  ', '  ','BLANCAS',JUG_B,JUG_N,'PENDIENTE');
    INSERT INTO PARTIDA VALUES (NUM_PARTIDA, 2, 'PB', 'PB', 'PB', 'PB', 'PB', 'PB', 'PB', 'PB','BLANCAS',JUG_B,JUG_N,'PENDIENTE');
    INSERT INTO PARTIDA VALUES (NUM_PARTIDA, 1, 'TB', 'CB', 'AB', 'RB', 'KB', 'AB', 'CB', 'TB','BLANCAS',JUG_B,JUG_N,'PENDIENTE');
COMMIT;
    RETURN NUM_PARTIDA;
END;
/

create or replace function validar_jugador_partida(part number, jug varchar2)
return boolean
is
AUX_PART NUMBER;
resultado boolean;
SUMATORIA number;
begin
AUX_PART := part;
resultado := false;
select count(jugador_blancas) into sumatoria from partida where id_partida = aux_part;
if  SUMATORIA is not null then
	resultado := true;
	return resultado;
else 
	select count(jugador_negras) into sumatoria from partida where id_partida = aux_part;
	if sumatoria is not null then
	resultado := true;
	return resultado;
	end if;
end if;
return resultado;
end;
/



CREATE OR REPLACE FUNCTION VALIDAR_COLOR_FICHA_ORIGEN(PART NUMBER, FIL_O NUMBER, COL_O VARCHAR2)
RETURN BOOLEAN
IS
RESULTADO BOOLEAN;
LINEA_PART PARTIDA%ROWTYPE;
COLOR_TURNO VARCHAR2(20);
FICHA VARCHAR2(2);
BEGIN
COLOR_TURNO := DEVOLVER_COLOR_TURNO(PART);
SELECT * INTO LINEA_PART FROM PARTIDA WHERE ID_PARTIDA = PART AND fila = FIL_O;
RESULTADO := FALSE;
FICHA := DEVOLVER_FICHA_CAMPO(PART, FIL_O, COL_O);

CASE COLOR_TURNO
WHEN 'BLANCAS' THEN
	if ficha = 'PB' or ficha = 'CB' or ficha = 'AB' or ficha = 'RB' or ficha = 'TB' or ficha = 'KB' then
		RESULTADO := TRUE;
		RETURN RESULTADO;
	end if;

WHEN 'NEGRAS' THEN
	if ficha = 'PN' or ficha = 'CN' or ficha = 'AN' or ficha = 'RN' or ficha = 'TN' or ficha = 'KN' then
		RESULTADO := TRUE;
		RETURN RESULTADO;
	end if;
END CASE;
RETURN RESULTADO;
END;
/

CREATE OR REPLACE FUNCTION VALIDAR_POSICION_DESTINO(PART NUMBER, FIL_D NUMBER, COL_D VARCHAR2)
RETURN BOOLEAN
IS
RESULTADO BOOLEAN;
LINEA_PART PARTIDA%ROWTYPE;
COLOR_TURNO VARCHAR2(20);
CAMPO_DESTINO VARCHAR2(2);
BEGIN
COLOR_TURNO := DEVOLVER_COLOR_TURNO(PART);
RESULTADO := FALSE;
SELECT * INTO LINEA_PART FROM PARTIDA WHERE ID_PARTIDA = PART AND fila = FIL_D;

CAMPO_DESTINO := DEVOLVER_FICHA_CAMPO(PART, FIL_D, COL_D);

CASE COLOR_TURNO
WHEN 'NEGRAS' THEN
	if CAMPO_DESTINO = 'PB' or  CAMPO_DESTINO= 'CB' or  CAMPO_DESTINO= 'AB' or  CAMPO_DESTINO= 'RB' or  CAMPO_DESTINO= 'TB' or  CAMPO_DESTINO= 'KB' OR CAMPO_DESTINO = '  ' then
		RESULTADO := TRUE;
		RETURN RESULTADO;
	end if;

WHEN 'BLANCAS' THEN
	if CAMPO_DESTINO = 'PN' or  CAMPO_DESTINO = 'CN' or  CAMPO_DESTINO = 'AN' or  CAMPO_DESTINO = 'RN' or  CAMPO_DESTINO = 'TN' or  CAMPO_DESTINO = 'KN' OR CAMPO_DESTINO = '  ' then
		RESULTADO := TRUE;
		RETURN RESULTADO;
	end if;
END CASE;
RETURN RESULTADO;
END;
/

CREATE OR REPLACE FUNCTION VALIDAR_MUERTE_REY(PART NUMBER, FIL_D VARCHAR2, COL_D VARCHAR2)
RETURN BOOLEAN
IS
RESULTADO BOOLEAN;
FIGURA VARCHAR2(2);
BEGIN
RESULTADO := FALSE;
FIGURA := DEVOLVER_FICHA_CAMPO(PART, FIL_D, COL_D);
IF FIGURA = 'KN' OR FIGURA = 'KB' THEN
	RESULTADO := TRUE;
	RETURN RESULTADO;
END IF;
RETURN RESULTADO;
END;
/

CREATE OR REPLACE FUNCTION ACTUALIZAR_MOVIMIENTO(PART NUMBER, FIL_O NUMBER, COL_O VARCHAR2, FIL_D NUMBER, COL_D VARCHAR2)
RETURN VARCHAR2
IS
RESULTADO VARCHAR2(1000);
COLOR_TURNO VARCHAR2(10);
NUEVO_COLOR_TURNO VARCHAR2(10);
FICHA_ORIGEN VARCHAR2(2);
BEGIN
COLOR_TURNO := DEVOLVER_COLOR_TURNO(PART);
FICHA_ORIGEN := DEVOLVER_FICHA_CAMPO(PART, FIL_O, COL_O);
CASE COLOR_TURNO
WHEN 'BLANCAS' THEN
	NUEVO_COLOR_TURNO := 'NEGRAS';
WHEN 'NEGRAS' THEN
	NUEVO_COLOR_TURNO := 'BLANCAS';
END CASE;

UPDATE PARTIDA SET TURNO = NUEVO_COLOR_TURNO WHERE ID_PARTIDA = PART;

CASE UPPER(COL_O)
WHEN 'A' THEN
    UPDATE PARTIDA SET COL_A = '  ' WHERE ID_PARTIDA = PART AND FILA = FIL_O;

WHEN 'B' THEN
	UPDATE PARTIDA SET  COL_B = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'C'  THEN
	UPDATE PARTIDA SET  COL_C = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'D'  THEN
	UPDATE PARTIDA SET  COL_D = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'E' THEN
	UPDATE PARTIDA SET  COL_E = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'F'  THEN
	UPDATE PARTIDA SET  COL_F = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'G'  THEN
	UPDATE PARTIDA SET  COL_G = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'H'  THEN
	UPDATE PARTIDA SET  COL_H = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
END CASE;

CASE UPPER(COL_D)
WHEN 'A' THEN
	UPDATE PARTIDA SET  COL_A = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'B' THEN
	UPDATE PARTIDA SET  COL_B = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'C' THEN
	UPDATE PARTIDA SET  COL_C = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'D'  THEN
	UPDATE PARTIDA SET  COL_D = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'E'  THEN
	UPDATE PARTIDA SET  COL_E = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'F' THEN
	UPDATE PARTIDA SET  COL_F = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'G'  THEN
	UPDATE PARTIDA SET  COL_G = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'H' THEN
	UPDATE PARTIDA SET  COL_H = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
END CASE;
RESULTADO := 'EL JUGADOR DE LAS FICHAS '||COLOR_TURNO||' HA MOVIDO LA FICHA '||FICHA_ORIGEN||' DE '||TO_CHAR(FIL_O)||COL_O||' A '||TO_CHAR(FIL_D)||COL_D||'.'||' EL SIGUIENTE MOVIMIENTO ES DEL JUGADOR DE LAS FICHAS '||NUEVO_COLOR_TURNO||'.';
COMMIT;
RETURN RESULTADO;
END;
/


CREATE OR REPLACE FUNCTION ACTUALIZAR_MOVIMIENTO_JAQUE_MATE(PART NUMBER, FIL_O NUMBER, COL_O VARCHAR2, FIL_D NUMBER, COL_D VARCHAR2)
RETURN VARCHAR2
IS
RESULTADO VARCHAR2(2000);
COLOR_TURNO VARCHAR2(10);
COLOR_ADVERSARIO VARCHAR2(10);
FICHA_ORIGEN VARCHAR2(2);
JUG_BLANCAS VARCHAR2(10);
NOMBRE_JUG_BLANCAS VARCHAR2(20);
JUG_NEGRAS VARCHAR2(10);
NOMBRE_JUG_NEGRAS VARCHAR2(20);
GANADOR VARCHAR2(20);
PERDEDOR VARCHAR(20);
BEGIN
COLOR_TURNO := DEVOLVER_COLOR_TURNO(PART);
FICHA_ORIGEN := DEVOLVER_FICHA_CAMPO(PART, FIL_O, COL_O);
SELECT DISTINCT PARTIDA.JUGADOR_BLANCAS, JUGADOR.NOMBRE INTO JUG_BLANCAS, NOMBRE_JUG_BLANCAS FROM PARTIDA, JUGADOR WHERE ID_PARTIDA = PART AND PARTIDA.JUGADOR_BLANCAS = JUGADOR.ID_JUGADOR;

SELECT DISTINCT PARTIDA.JUGADOR_NEGRAS, JUGADOR.NOMBRE INTO JUG_NEGRAS, NOMBRE_JUG_NEGRAS FROM PARTIDA, JUGADOR WHERE ID_PARTIDA = PART AND PARTIDA.JUGADOR_NEGRAS = JUGADOR.ID_JUGADOR;

UPDATE PARTIDA SET RESULTADO = 'FINALIZADA' WHERE ID_PARTIDA = PART;

CASE COLOR_TURNO
WHEN 'BLANCAS' THEN
	GANADOR := NOMBRE_JUG_BLANCAS;
	PERDEDOR := NOMBRE_JUG_NEGRAS;
	COLOR_ADVERSARIO := 'NEGRAS';
	UPDATE JUGADOR SET GANES = GANES+1 WHERE ID_JUGADOR = JUG_BLANCAS;
	UPDATE JUGADOR SET PERDIDAS = PERDIDAS+1 WHERE ID_JUGADOR = JUG_NEGRAS;
WHEN 'NEGRAS' THEN
	GANADOR := NOMBRE_JUG_NEGRAS;
	PERDEDOR := NOMBRE_JUG_BLANCAS;
	COLOR_ADVERSARIO := 'BLANCAS';
	UPDATE JUGADOR SET GANES = GANES+1 WHERE ID_JUGADOR = JUG_NEGRAS;
	UPDATE JUGADOR SET PERDIDAS = PERDIDAS+1 WHERE ID_JUGADOR = JUG_BLANCAS;
END CASE;

CASE UPPER(COL_O)
WHEN 'A' THEN
	UPDATE PARTIDA SET  COL_A = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'B' THEN
	UPDATE PARTIDA SET  COL_B = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'C'  THEN
	UPDATE PARTIDA SET  COL_C = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'D' THEN
	UPDATE PARTIDA SET  COL_D = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'E'  THEN
	UPDATE PARTIDA SET  COL_E = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'F' THEN
	UPDATE PARTIDA SET  COL_F = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'G'  THEN
	UPDATE PARTIDA SET  COL_G = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
WHEN 'H' THEN
	UPDATE PARTIDA SET  COL_H = '  '  WHERE ID_PARTIDA = PART AND FILA = FIL_O;
END CASE;

CASE UPPER(COL_D)
WHEN 'A' THEN
	UPDATE PARTIDA SET  COL_A = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'B' THEN
	UPDATE PARTIDA SET  COL_B = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'C' THEN
	UPDATE PARTIDA SET  COL_C = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'D' THEN
	UPDATE PARTIDA SET  COL_D = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'E' THEN
	UPDATE PARTIDA SET  COL_E = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'F' THEN
	UPDATE PARTIDA SET  COL_F = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'G' THEN
	UPDATE PARTIDA SET  COL_G = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
WHEN 'H' THEN
	UPDATE PARTIDA SET  COL_H = FICHA_ORIGEN  WHERE ID_PARTIDA = PART AND FILA = FIL_D;
END CASE;
RESULTADO := 'EL JUGADOR DE LAS FICHAS '||COLOR_TURNO||' HA MOVIDO LA FICHA '||FICHA_ORIGEN||' DE '||TO_CHAR(FIL_O)||COL_O||' A '||TO_CHAR(FIL_D)||COL_D||'. EN ESTE MOVIMIENTO ELIMINO AL REY DEL EQUIPO DE LAS FICHAS '||COLOR_ADVERSARIO||'. RESULTADO: JAQUE MATE. EL GANADOR ES '||GANADOR||' Y EL PERDEDOR ES '||PERDEDOR;
COMMIT;
RETURN RESULTADO;
END;
/

CREATE OR REPLACE FUNCTION VALIDAR_CASTILLO(PART NUMBER, FIL_O NUMBER, COL_O VARCHAR2, FIL_D NUMBER, COL_D VARCHAR2)
RETURN BOOLEAN
IS
RESULTADO BOOLEAN;
CAMPO_AUX VARCHAR2(2);
CAMPO_LIBRE BOOLEAN;
NUM_COL_O NUMBER;
NUM_COL_D NUMBER;
COLUMNA VARCHAR2(2);
BEGIN
RESULTADO := FALSE;
CAMPO_LIBRE := FALSE;
IF FIL_O = FIL_D THEN

	NUM_COL_O := DEVOLVER_NUMERO_COLUMNA(COL_O);
	NUM_COL_D := DEVOLVER_NUMERO_COLUMNA(COL_D);

	IF NUM_COL_O - NUM_COL_D = -1 OR NUM_COL_O - NUM_COL_D = 1 THEN
	RESULTADO := TRUE;
	RETURN RESULTADO;
	END IF;
	IF NUM_COL_D - NUM_COL_O > 1 THEN
		FOR I IN NUM_COL_O+1..NUM_COL_D-1
		LOOP
			COLUMNA := DEVOLVER_CHAR_COLUMNA(I);
			CAMPO_AUX := DEVOLVER_FICHA_CAMPO(PART, FIL_O, COLUMNA);
			IF CAMPO_AUX = '  ' THEN
				CAMPO_LIBRE := TRUE;
			ELSE
				RESULTADO:= FALSE;
				RETURN RESULTADO;
			END IF;
		END LOOP;
	END IF;

	IF NUM_COL_O - NUM_COL_D > 1 THEN
			FOR I IN NUM_COL_D+1..NUM_COL_O-1
			LOOP
			COLUMNA := DEVOLVER_CHAR_COLUMNA(I);
			CAMPO_AUX := DEVOLVER_FICHA_CAMPO(PART, FIL_O, COLUMNA);
			IF CAMPO_AUX = '  ' THEN
				CAMPO_LIBRE := TRUE;
				ELSE
				RESULTADO:= FALSE;
				RETURN RESULTADO;
			END IF;

			END LOOP;
	END IF;
END IF;

IF LOWER(COL_O) = LOWER(COL_D) THEN
	IF FIL_O - FIL_D = -1 OR FIL_O - FIL_D = 1 THEN
	RESULTADO := TRUE;
	RETURN RESULTADO;
	END IF;

	IF FIL_D - FIL_O > 1 THEN
		FOR I IN FIL_O+1..FIL_D-1
		LOOP
			CAMPO_AUX := DEVOLVER_FICHA_CAMPO(PART, I, COL_O);
			IF CAMPO_AUX = '  ' THEN
				CAMPO_LIBRE := TRUE;
			ELSE
				RESULTADO:= FALSE;
				RETURN RESULTADO;
			END IF;

		END LOOP;
	END IF;

	IF FIL_O - FIL_D > 1 THEN
			FOR I IN FIL_D+1..FIL_O-1
			LOOP
			CAMPO_AUX := DEVOLVER_FICHA_CAMPO(PART, I, COL_O);
			IF CAMPO_AUX = '  ' THEN
				CAMPO_LIBRE := TRUE;
				ELSE
				RESULTADO:= FALSE;
				RETURN RESULTADO;
			END IF;

			END LOOP;
	END IF;

END IF;

IF CAMPO_LIBRE THEN
RESULTADO := TRUE;
END IF;
RETURN RESULTADO;
END;
/

CREATE OR REPLACE FUNCTION VALIDAR_CABALLO(PART NUMBER, FIL_O NUMBER, COL_O VARCHAR2, FIL_D NUMBER, COL_D VARCHAR2)
RETURN BOOLEAN
IS
NUM_COL_O NUMBER;
NUM_COL_D NUMBER;
RESULTADO BOOLEAN;
BEGIN
RESULTADO := FALSE;
IF FIL_O <> FIL_D AND COL_O <> COL_D THEN

	NUM_COL_O := DEVOLVER_NUMERO_COLUMNA(COL_O);
	NUM_COL_D := DEVOLVER_NUMERO_COLUMNA(COL_D);

	IF (ABS(FIL_O-FIL_D) = 2 AND ABS(NUM_COL_O - NUM_COL_D) = 1) OR (ABS(FIL_O-FIL_D) = 1 AND ABS(NUM_COL_O - NUM_COL_D) = 2) THEN
	RESULTADO := TRUE;
	END IF;
END IF;
RETURN RESULTADO;
END;
/

create or replace function VALIDAR_REY (FILAO NUMBER, COLO VARCHAR2, FILAD NUMBER, COLD VARCHAR2) RETURN BOOLEAN IS
    FILA_ORGIEN NUMBER := FILAO;
    FILA_DESTINO NUMBER:= FILAD;
    COLUMNA_ORIGEN VARCHAR2(10):= UPPER(COLO);
    COLUMNA_DESTINO VARCHAR2(10):= UPPER(COLD);
BEGIN
    IF (COLUMNA_ORIGEN = COLUMNA_DESTINO AND (FILAD = FILAO-1) OR (FILAD = FILAO+1))THEN
        RETURN TRUE;
    end if;
    IF (
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'A') AND (COLUMNA_DESTINO='B') AND (FILA_ORGIEN = FILA_DESTINO) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'B') AND (COLUMNA_DESTINO='A') OR (COLUMNA_DESTINO= 'C') AND (FILA_ORGIEN = FILA_DESTINO) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'C') AND (COLUMNA_DESTINO='D') OR (COLUMNA_DESTINO= 'B') AND (FILA_ORGIEN = FILA_DESTINO) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'D') AND (COLUMNA_DESTINO='C') OR (COLUMNA_DESTINO= 'E') AND (FILA_ORGIEN = FILA_DESTINO) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'E') AND (COLUMNA_DESTINO='D') OR (COLUMNA_DESTINO= 'F') AND (FILA_ORGIEN = FILA_DESTINO) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'F') AND (COLUMNA_DESTINO='E') OR (COLUMNA_DESTINO= 'G') AND (FILA_ORGIEN = FILA_DESTINO) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'G') AND (COLUMNA_DESTINO='F') OR (COLUMNA_DESTINO= 'H') AND (FILA_ORGIEN = FILA_DESTINO) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'H') AND (COLUMNA_DESTINO='G') AND (FILA_ORGIEN = FILA_DESTINO)
        ) THEN
        RETURN TRUE;
    end if;

    IF (
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'A') AND (COLUMNA_DESTINO='B') AND (FILA_ORGIEN = FILA_DESTINO) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'B') AND (COLUMNA_DESTINO='A') OR (COLUMNA_DESTINO= 'C') AND (FILAD = FILAO-1) OR (FILAD = FILAO+1) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'C') AND (COLUMNA_DESTINO='D') OR (COLUMNA_DESTINO= 'B') AND (FILAD = FILAO-1) OR (FILAD = FILAO+1) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'D') AND (COLUMNA_DESTINO='C') OR (COLUMNA_DESTINO= 'E') AND (FILAD = FILAO-1) OR (FILAD = FILAO+1) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'E') AND (COLUMNA_DESTINO='D') OR (COLUMNA_DESTINO= 'F') AND (FILAD = FILAO-1) OR (FILAD = FILAO+1) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'F') AND (COLUMNA_DESTINO='E') OR (COLUMNA_DESTINO= 'G') AND (FILAD = FILAO-1) OR (FILAD = FILAO+1) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'G') AND (COLUMNA_DESTINO='F') OR (COLUMNA_DESTINO= 'H') AND (FILAD = FILAO-1) OR (FILAD = FILAO+1) OR
        (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'H') AND (COLUMNA_DESTINO='G') AND (FILAD = FILAO-1) OR (FILAD = FILAO+1)
        ) THEN
        RETURN TRUE;
    end if;
    RETURN FALSE;
END;
/

CREATE OR REPLACE FUNCTION VALIDAR_PEON (PART NUMBER, FILAO NUMBER, COLO VARCHAR2, FILAD NUMBER, COLD VARCHAR2) RETURN BOOLEAN IS
    ORIGEN VARCHAR2(2);
    DESTINO varchar2(2);
    FILA_ORGIEN NUMBER := FILAO;
    FILA_DESTINO NUMBER:= FILAD;
    COLUMNA_ORIGEN VARCHAR2(10):= UPPER(COLO);
    COLUMNA_DESTINO VARCHAR2(10):= UPPER(COLD);
BEGIN
    ORIGEN := DEVOLVER_FICHA_CAMPO(PART, FILA_ORGIEN, COLUMNA_ORIGEN);
    DESTINO := DEVOLVER_FICHA_CAMPO(PART, FILA_DESTINO, COLUMNA_DESTINO);
    IF (
        (ORIGEN = 'PB') AND (FILA_ORGIEN = 2) AND ((FILA_DESTINO = FILA_ORGIEN+2) OR (FILA_DESTINO= FILA_ORGIEN+1)) AND (COLUMNA_ORIGEN = COLUMNA_DESTINO) OR
        (ORIGEN = 'PN') AND (FILA_ORGIEN = 7) AND ((FILA_DESTINO = FILA_ORGIEN-2) OR (FILA_DESTINO= FILA_ORGIEN-1)) AND (COLUMNA_ORIGEN = COLUMNA_DESTINO)
        )THEN
        RETURN TRUE;
    end if;
    IF (
        ((ORIGEN = 'PB') AND (FILA_DESTINO= FILA_ORGIEN+1)) AND (COLUMNA_ORIGEN = COLUMNA_DESTINO) OR
        ((ORIGEN = 'PN') AND (FILA_DESTINO= FILA_ORGIEN-1)) AND (COLUMNA_ORIGEN = COLUMNA_DESTINO)
        )THEN
        RETURN TRUE;
    end if;
    IF (
        (
            ORIGEN = 'PB' AND
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'A') AND (COLUMNA_DESTINO = 'B') AND (FILAD = FILAO + 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'B') AND (COLUMNA_DESTINO = 'A') OR (COLUMNA_DESTINO = 'C') AND (FILAD = FILAO + 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'C') AND (COLUMNA_DESTINO = 'D') OR (COLUMNA_DESTINO = 'B') AND (FILAD = FILAO + 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'D') AND (COLUMNA_DESTINO = 'C') OR (COLUMNA_DESTINO = 'E') AND (FILAD = FILAO + 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'E') AND (COLUMNA_DESTINO = 'D') OR (COLUMNA_DESTINO = 'F') AND (FILAD = FILAO + 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'F') AND (COLUMNA_DESTINO = 'E') OR (COLUMNA_DESTINO = 'G') AND (FILAD = FILAO + 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'G') AND (COLUMNA_DESTINO = 'F') OR (COLUMNA_DESTINO = 'H') AND (FILAD = FILAO + 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'H') AND (COLUMNA_DESTINO = 'G') AND (FILAD = FILAO - 1)
        ) OR(
            ORIGEN = 'PN' AND
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'A') AND (COLUMNA_DESTINO = 'B') AND (FILAD = FILAO - 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'B') AND (COLUMNA_DESTINO = 'A') OR (COLUMNA_DESTINO = 'C') AND (FILAD = FILAO - 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'C') AND (COLUMNA_DESTINO = 'D') OR (COLUMNA_DESTINO = 'B') AND (FILAD = FILAO - 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'D') AND (COLUMNA_DESTINO = 'C') OR (COLUMNA_DESTINO = 'E') AND (FILAD = FILAO - 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'E') AND (COLUMNA_DESTINO = 'D') OR (COLUMNA_DESTINO = 'F') AND (FILAD = FILAO - 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'F') AND (COLUMNA_DESTINO = 'E') OR (COLUMNA_DESTINO = 'G') AND (FILAD = FILAO - 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'G') AND (COLUMNA_DESTINO = 'F') OR (COLUMNA_DESTINO = 'H') AND (FILAD = FILAO - 1) AND DESTINO != '  ' OR
            (COLUMNA_ORIGEN != COLUMNA_DESTINO) AND (COLUMNA_ORIGEN = 'H') AND (COLUMNA_DESTINO = 'G') AND (FILAD = FILAO - 1)
        )
        ) THEN
        RETURN TRUE;
    end if;
    RETURN FALSE;
end;
/

CREATE OR REPLACE FUNCTION VALIDAR_ALFIL(PART NUMBER, FILAO NUMBER, COLO VARCHAR2, FILAD NUMBER, COLD VARCHAR2) RETURN BOOLEAN IS
    FILA_ORGIEN NUMBER := FILAO;
    FILA_DESTINO NUMBER:= FILAD;
    COL_O VARCHAR2(10):= UPPER(COLO);
    COL_D VARCHAR2(10):= UPPER(COLD);
    NUM_COL_O NUMBER;
    NUM_COL_D NUMBER;
    AUX_COL VARCHAR2(10);
    ESTADO BOOLEAN;
    Y NUMBER;
BEGIN
    NUM_COL_O := DEVOLVER_NUMERO_COLUMNA(COL_O);
    NUM_COL_D := DEVOLVER_NUMERO_COLUMNA(COL_D);
    IF FILAO = FILAD OR COLO = COLD THEN
        RETURN FALSE;
    ELSE
                IF (ABS(FILA_ORGIEN-FILA_DESTINO) <> ABS(NUM_COL_O-NUM_COL_D)) THEN
                    RETURN FALSE;
                    ELSE
                    ESTADO := TRUE;
                     IF NUM_COL_O < NUM_COL_D AND FILA_ORGIEN < FILA_DESTINO THEN
                        Y := FILA_ORGIEN+1;
                        WHILE ESTADO AND Y <= FILA_DESTINO-1 LOOP
                            FOR X IN NUM_COL_O+1..NUM_COL_D-1 LOOP
                            AUX_COL:= DEVOLVER_CHAR_COLUMNA(X);
                            IF DEVOLVER_FICHA_CAMPO(PART, Y, AUX_COL) <> '  ' THEN
                                ESTADO := FALSE;
                                RETURN ESTADO;
                            EXIT WHEN ESTADO = FALSE;
                            end if;
                            Y := Y + 1 ;
                            end loop;
                        end loop;
                    ELSIF ((NUM_COL_O < NUM_COL_D) AND (FILA_ORGIEN > FILA_DESTINO)) THEN
                        ESTADO := TRUE;
                        Y := FILA_ORGIEN-1;
                        WHILE ESTADO AND Y >= FILA_DESTINO+1 LOOP
                            FOR X IN NUM_COL_O+1..NUM_COL_D-1 LOOP
                                    AUX_COL := DEVOLVER_CHAR_COLUMNA(X);
                                    IF DEVOLVER_FICHA_CAMPO(PART, Y, AUX_COL) <> '  ' THEN
                                    ESTADO := FALSE;
                                     RETURN ESTADO;
                                    EXIT WHEN ESTADO = FALSE;
                                    end if;
                                Y:= Y - 1;
                            end loop;
                        end loop;
                    ELSIF ((NUM_COL_O > NUM_COL_D) AND (FILA_ORGIEN < FILA_DESTINO)) THEN

                        Y := FILA_ORGIEN+1;
                        WHILE ESTADO AND Y <= FILA_DESTINO-1 LOOP
                            FOR X IN NUM_COL_D+1..NUM_COL_O-1 LOOP
                                AUX_COL:= DEVOLVER_CHAR_COLUMNA(X);
                                IF (DEVOLVER_FICHA_CAMPO(PART, Y, AUX_COL) != '  ')THEN
                                    ESTADO := FALSE;
                                     RETURN ESTADO;
                                    EXIT WHEN ESTADO = FALSE;
                                end if;
                                Y:= Y + 1;
                            end loop;
                        end loop;
                        ELSIF ((NUM_COL_O > NUM_COL_D) AND (FILA_ORGIEN > FILA_DESTINO)) THEN

                            Y := FILA_ORGIEN-1;
                            WHILE ESTADO AND Y >= FILA_DESTINO+1 LOOP
                                FOR X IN NUM_COL_D+1..NUM_COL_O-1 LOOP
                                    AUX_COL:= DEVOLVER_CHAR_COLUMNA(X);
                                    IF (DEVOLVER_FICHA_CAMPO(PART, Y, AUX_COL) != '  ')THEN
                                        ESTADO := FALSE;
                                        RETURN ESTADO;
                                        EXIT WHEN ESTADO = FALSE;
                                    end if;
                                    Y:= Y - 1;
                                end loop;
                            end loop;
            ELSE
            RETURN FALSE;
            END IF;
    end if;
    end if;
    RETURN ESTADO;
end;
/

CREATE OR REPLACE FUNCTION VALIDAR_REINA(PART NUMBER, FIL_O NUMBER, COL_O VARCHAR2, FIL_D NUMBER, COL_D VARCHAR2)
RETURN BOOLEAN
IS
RESULTADO BOOLEAN;
BEGIN
RESULTADO := FALSE;
IF VALIDAR_CASTILLO(PART, FIL_O, COL_O, FIL_D, COL_D) THEN
	RESULTADO := TRUE;
	RETURN RESULTADO;
END IF;
IF VALIDAR_ALFIL(PART, FIL_O, COL_O, FIL_D, COL_D) THEN
	RESULTADO := TRUE;
	RETURN RESULTADO;
END IF;
RETURN RESULTADO;
END;
/

CREATE OR REPLACE FUNCTION VALIDAR_MOVIMIENTO_O_D(PART NUMBER, FIL_O NUMBER, COL_O VARCHAR2, FIL_D NUMBER, COL_D VARCHAR2)
RETURN BOOLEAN
IS
RESULTADO BOOLEAN;
FICHA_CAMPO VARCHAR2(2);
BEGIN
RESULTADO := FALSE;
FICHA_CAMPO := DEVOLVER_FICHA_CAMPO(PART, FIL_O, COL_O);
CASE FICHA_CAMPO
WHEN 'PB' THEN
	RESULTADO := VALIDAR_PEON(PART, FIL_O, COL_O, FIL_D, COL_D);
WHEN 'CB' THEN
	RESULTADO := VALIDAR_CABALLO(PART, FIL_O, COL_O, FIL_D, COL_D);
WHEN 'AB' THEN
    RESULTADO := VALIDAR_ALFIL(PART, FIL_O, COL_O, FIL_D, COL_D);
WHEN 'RB' THEN
    RESULTADO := VALIDAR_REINA(PART, FIL_O, COL_O, FIL_D, COL_D);
WHEN 'KB' THEN
    RESULTADO := VALIDAR_REY(FIL_O, COL_O, FIL_D, COL_D);
WHEN 'TB' THEN
    RESULTADO := VALIDAR_CASTILLO(PART, FIL_O, COL_O, FIL_D, COL_D);

    WHEN 'PN' THEN
	RESULTADO := VALIDAR_PEON(PART, FIL_O, COL_O, FIL_D, COL_D);
WHEN 'CN' THEN
	RESULTADO := VALIDAR_CABALLO(PART, FIL_O, COL_O, FIL_D, COL_D);
WHEN'AN' THEN
    RESULTADO := VALIDAR_ALFIL(PART, FIL_O, COL_O, FIL_D, COL_D);
WHEN'RN' THEN
    RESULTADO := VALIDAR_REINA(PART, FIL_O, COL_O, FIL_D, COL_D);
WHEN 'KN' THEN
    RESULTADO := VALIDAR_REY( FIL_O, COL_O, FIL_D, COL_D);
WHEN 'TN' THEN
    RESULTADO := VALIDAR_CASTILLO(PART, FIL_O, COL_O, FIL_D, COL_D);
END CASE;
RETURN RESULTADO;
END;
/