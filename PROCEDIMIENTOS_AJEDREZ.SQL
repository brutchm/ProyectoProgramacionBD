CREATE OR REPLACE PROCEDURE PROC_CONSULTAR_TABLERO(ID_PART NUMBER)
IS
NOMBREB VARCHAR2(15);
APELLIDOB VARCHAR2(15);
NOMBREN VARCHAR2(15);
APELLIDON VARCHAR2(15);
MUEVEN VARCHAR2(20);

CURSOR CU_FIL_COL IS
SELECT FILA, COL_A, COL_B, COL_C, COL_D, COL_E, COL_F, COL_G, COL_H FROM PARTIDA WHERE ID_PARTIDA = ID_PART ORDER BY FILA DESC;
BEGIN

IF VALIDAR_PARTIDA(ID_PART) THEN
SELECT DISTINCT JUGADOR.NOMBRE, JUGADOR.APELLIDO, PARTIDA.TURNO INTO NOMBREB, APELLIDOB, MUEVEN FROM JUGADOR, PARTIDA WHERE PARTIDA.ID_PARTIDA = ID_PART AND JUGADOR.ID_JUGADOR = PARTIDA.JUGADOR_BLANCAS;
SELECT DISTINCT JUGADOR.NOMBRE, JUGADOR.APELLIDO INTO NOMBREN, APELLIDON FROM JUGADOR, PARTIDA WHERE PARTIDA.ID_PARTIDA = ID_PART AND JUGADOR.ID_JUGADOR = PARTIDA.JUGADOR_NEGRAS;
DBMS_OUTPUT.PUT_LINE('TABLERO DE PARTIDA: '||TO_CHAR(ID_PART));
DBMS_OUTPUT.PUT_LINE('BLANCAS: '||NOMBREB||' '||APELLIDOB||'	'||
'NEGRAS: '||NOMBREN||' '||APELLIDON||'	'||'MUEVEN: '||MUEVEN);

FOR CAMPOS IN CU_FIL_COL
LOOP
DBMS_OUTPUT.PUT_LINE('	_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _');
DBMS_OUTPUT.PUT_LINE(TO_CHAR(CAMPOS.FILA)||'   |     '||CAMPOS.COL_A||'     |     '||CAMPOS.COL_B||'     |     '||CAMPOS.COL_C||'     |     '||CAMPOS.COL_D||'     |     '||CAMPOS.COL_E||'     |     '||CAMPOS.COL_F||'     |     '||CAMPOS.COL_G||'     |     '||CAMPOS.COL_H||'     |   ');
END LOOP;
DBMS_OUTPUT.PUT_LINE('	_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _');
DBMS_OUTPUT.PUT_LINE('	    A            B            C           D            E            F             G           H     ');

ELSE
DBMS_OUTPUT.PUT_LINE('EL ID DE PARTIDA INGRESADO NO SE ENCUENTRA REGISTRADO.');

END IF;

END;
/

CREATE OR REPLACE PROCEDURE PROC_AGREGAR_NUEVO_JUGADOR(VAR_ID VARCHAR2, VAR_NOMBRE VARCHAR2, VAR_APELLIDO VARCHAR2)
IS
BEGIN
IF VALIDAR_JUGADOR(VAR_ID) THEN
DBMS_OUTPUT.PUT_LINE('EL ID INGRESADO YA EXISTE, NO SE PUEDE REGISTRAR UN ID EXISTENTE.');
ELSE
INSERT INTO JUGADOR VALUES(VAR_ID, VAR_NOMBRE, VAR_APELLIDO, 0, 0, 0,0);
COMMIT;
DBMS_OUTPUT.PUT_LINE('JUGADOR REGISTRADO SATISFACTORIAMENTE');
END IF;
END;
/

CREATE OR REPLACE PROCEDURE PROC_CREAR_NUEVA_PARTIDA(JUG_B VARCHAR2, JUG_N VARCHAR2)
IS
NUM_PARTIDA NUMBER;
BEGIN
IF JUG_B <> JUG_N THEN
	IF (VALIDAR_JUGADOR(JUG_B) AND VALIDAR_JUGADOR(JUG_N)) THEN
	NUM_PARTIDA := INCIAR_TABLERO(JUG_B, JUG_N);
	UPDATE JUGADOR SET PARTIDAS_JUGADAS=PARTIDAS_JUGADAS+1 WHERE ID_JUGADOR = JUG_B;
	UPDATE JUGADOR SET PARTIDAS_JUGADAS=PARTIDAS_JUGADAS+1 WHERE ID_JUGADOR = JUG_N;
	DBMS_OUTPUT.PUT_LINE('SE HA CREADO NUEVA PARTIDA, NUMERO DE PARTIDA: '||TO_CHAR(NUM_PARTIDA));
	COMMIT;
	ELSE
	DBMS_OUTPUT.PUT_LINE('LOS ID INGRESADOS NO PERTENECEN A JUGADORES REGISTRADOS.');
	END IF;
ELSE
	DBMS_OUTPUT.PUT_LINE('LOS ID INGRESADOS DEBEN SER DIFERENTES ENTRE SI');

END IF;

END;
/

create or replace procedure pedir_empate(par number, jug_blancas varchar2, jug_negras varchar2)
is
begin
if validar_partida(par) then
	if jug_blancas <> jug_negras then
		if validar_jugador_partida(par, jug_blancas) and validar_jugador_partida(par,jug_negras) then
			update partida set resultado = 'Finalizada' where id_partida = par;
			update jugador set empates = empates+1 where id_jugador=jug_blancas or id_jugador = jug_negras;
			dbms_output.put_line('Empate registrado correctamente');

		else
			dbms_output.put_line('Los id ingresados no coinciden a los registradas en la partida '||to_char(par)||'.');
		end if;
	else
	dbms_output.put_line('Los id de los jugadores deben ser diferentes.');
	end if;

else
 dbms_output.put_line('La partida no existe en los registros.');
end if;

end;
/

CREATE OR REPLACE PROCEDURE PROC_MOVER_FICHA(PART NUMBER, FIL_O NUMBER, COL_O VARCHAR2, FIL_D NUMBER, COL_D VARCHAR2)
IS
RESULTADO VARCHAR2(1000);
BEGIN

	IF VALIDAR_PARTIDA(PART) THEN
		IF VALIDAR_PARTIDA_PENDIENTE(PART) THEN
			IF (FIL_O >= 1 AND FIL_O <=8) AND (FIL_D >= 1 AND FIL_D <= 8) THEN
				IF lower(substr(COL_O,1,1)) in ('a','b','c','d','e','f','g','h') AND lower(substr(COL_D,1,1)) in ('a','b','c','d','e','f','g','h') THEN
					IF FIL_O = FIL_D AND COL_O = COL_D THEN
						DBMS_OUTPUT.PUT_LINE('EL CAMPO DE ORIGEN Y EL DE DESTINO NO PUEDE SER EL MISMO');
					ELSE

						IF VALIDAR_COLOR_FICHA_ORIGEN(PART, FIL_O, COL_O) THEN
							IF VALIDAR_POSICION_DESTINO(PART, FIL_D, COL_D) THEN
								IF VALIDAR_MOVIMIENTO_O_D(PART, FIL_O, COL_O, FIL_D, COL_D) THEN
									IF VALIDAR_MUERTE_REY(PART, FIL_D, COL_D) THEN
										RESULTADO := ACTUALIZAR_MOVIMIENTO_JAQUE_MATE(PART, FIL_O, COL_O, FIL_D, COL_D);
										DBMS_OUTPUT.PUT_LINE(RESULTADO);
									ELSE
										RESULTADO := ACTUALIZAR_MOVIMIENTO(PART, FIL_O, COL_O, FIL_D, COL_D);
										DBMS_OUTPUT.PUT_LINE(RESULTADO);
									END IF;

								ELSE
								DBMS_OUTPUT.PUT_LINE('LA FICHA SELECCIONADA NO PUEDE REALIZAR ESE TIPO DE MOVIMIENTO.');
								END IF;
							ELSE
							DBMS_OUTPUT.PUT_LINE('EL CAMPO DE DESTINO SELECCIONADO NO ES POSIBLE');
							END IF;

						ELSE
						DBMS_OUTPUT.PUT_LINE('EL CAMPO SELECCIONADO NO CORRESPONDE A UNA FICHA DEL COLOR DE TURNO.');
						END IF;
					END IF;

					


				ELSE
				DBMS_OUTPUT.PUT_LINE('LAS LETRAS INGRESADAS EN LAS COLUMNAS SE SALEN DE LAS COORDENADAS DEL TABLERO');
				END IF;
			ELSE
			DBMS_OUTPUT.PUT_LINE('EL NUMERO INGRESADO EN LAS FILAS SE SALE DE LAS COORDENADAS DEL TABLERO');
			END IF;

		ELSE
		DBMS_OUTPUT.PUT_LINE('LA PARTIDA SE ENCUENTRA FINALIZADA. NO PUEDE REALIZAR MOVIMIENTOS EN UNA PARTIDA QUE NO SEA PENDIENTE.');
		END IF;
	ELSE
	DBMS_OUTPUT.PUT_LINE('LA PARTIDA INGRESADA NO EXISTE.');
	END IF;

END;
/